{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, SIGN_IN, SIGN_ERROR, LOG_IN_SUCCESS, LOG_IN_FAIL, LOG_OUT, CLEAR_PROFILE } from './types';\nimport { setAlert } from './alert';\nimport axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken'; //is sign in ? user =>memeriksa apakah user sudah login\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: SIGN_IN,\n      payload: res.data\n    });\n  } catch (er) {\n    dispatch({\n      type: SIGN_ERROR\n    });\n  }\n}; // login user\n\nexport const login = ({\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOG_IN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOG_IN_FAIL\n    });\n  }\n}; // register user\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // log out user\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOG_OUT\n  });\n};","map":{"version":3,"sources":["E:/nodejs/mediocademy/social/client/src/actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","SIGN_IN","SIGN_ERROR","LOG_IN_SUCCESS","LOG_IN_FAIL","LOG_OUT","CLEAR_PROFILE","setAlert","axios","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","er","login","email","password","config","headers","body","JSON","stringify","post","err","errors","response","forEach","error","msg","register","name","logout"],"mappings":"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","sourcesContent":["import { REGISTER_SUCCESS, REGISTER_FAIL, \r\n        SIGN_IN, SIGN_ERROR, \r\n        LOG_IN_SUCCESS,LOG_IN_FAIL, LOG_OUT, CLEAR_PROFILE} from './types';\r\nimport { setAlert } from './alert';\r\nimport axios from 'axios';\r\nimport setAuthToken from '../utils/setAuthToken';\r\n\r\n//is sign in ? user =>memeriksa apakah user sudah login\r\nexport const loadUser = () => async dispatch =>{\r\n    if(localStorage.token){\r\n        setAuthToken(localStorage.token);\r\n    }\r\n\r\n    try{\r\n        const res = await axios.get('/api/auth');\r\n\r\n        dispatch({\r\n            type : SIGN_IN,\r\n            payload : res.data\r\n        });\r\n    }catch(er){\r\n        dispatch({\r\n            type : SIGN_ERROR\r\n            \r\n        });\r\n    }\r\n}\r\n\r\n\r\n// login user\r\nexport const login = ({ email, password })=> async dispatch =>  {\r\n    const config = {\r\n        headers : {\r\n            'Content-Type' : 'application/json'\r\n        }\r\n    }\r\n    \r\n    const body = JSON.stringify({email, password});\r\n     \r\n    try{\r\n        const res = await axios.post('/api/auth', body, config);\r\n        dispatch({\r\n            type : LOG_IN_SUCCESS,\r\n            payload : res.data\r\n        })\r\n        dispatch(loadUser());\r\n    }catch(err){\r\n        const errors = err.response.data.errors\r\n        if(errors){\r\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\r\n        }\r\n        dispatch({\r\n            type : LOG_IN_FAIL\r\n        })\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n// register user\r\nexport const register = ({ name, email, password })=> async dispatch =>  {\r\n    const config = {\r\n        headers : {\r\n            'Content-Type' : 'application/json'\r\n        }\r\n    }\r\n    \r\n    const body = JSON.stringify({name, email, password});\r\n     \r\n    try{\r\n        const res = await axios.post('/api/users', body, config);\r\n        dispatch({\r\n            type : REGISTER_SUCCESS,\r\n            payload : res.data\r\n        })\r\n        dispatch(loadUser());\r\n    }catch(err){\r\n        const errors = err.response.data.errors\r\n        if(errors){\r\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\r\n        }\r\n        dispatch({\r\n            type : REGISTER_FAIL\r\n        })\r\n    }\r\n    \r\n}\r\n\r\n\r\n// log out user\r\nexport const logout = ()=>dispatch =>  {\r\n\r\n    dispatch({ type :  CLEAR_PROFILE});\r\n    dispatch({ type :  LOG_OUT});\r\n   \r\n}\r\n"]},"metadata":{},"sourceType":"module"}