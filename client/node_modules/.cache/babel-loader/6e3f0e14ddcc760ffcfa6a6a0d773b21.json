{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, SIGN_IN, SIGN_ERROR } from './types';\nimport { setAlert } from './alert';\nimport axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken'; //sign in user =>memeriksa apakah user sudah login\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: SIGN_IN,\n      payload: res.data\n    });\n  } catch (er) {\n    dispatch({\n      type: SIGN_ERROR\n    });\n  }\n};\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["E:/nodejs/mediocademy/social/client/src/actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","SIGN_IN","SIGN_ERROR","setAlert","axios","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","er","register","name","email","password","config","headers","body","JSON","stringify","post","err","errors","response","forEach","error","msg"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,aAA3B,EAA0CC,OAA1C,EAAmDC,UAAnD,QAAoE,SAApE;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAiB;AAC3C,MAAGC,YAAY,CAACC,KAAhB,EAAsB;AAClBJ,IAAAA,YAAY,CAACG,YAAY,CAACC,KAAd,CAAZ;AACH;;AAED,MAAG;AACC,UAAMC,GAAG,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAU,WAAV,CAAlB;AAEAJ,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAGX,OADF;AAELY,MAAAA,OAAO,EAAGH,GAAG,CAACI;AAFT,KAAD,CAAR;AAIH,GAPD,CAOC,OAAMC,EAAN,EAAS;AACNR,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAGV;AADF,KAAD,CAAR;AAIH;AACJ,CAlBM;AAqBP,OAAO,MAAMc,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KAA8B,MAAMZ,QAAN,IAAmB;AACrE,QAAMa,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAG;AACN,sBAAiB;AADX;AADC,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACP,IAAAA,IAAD;AAAOC,IAAAA,KAAP;AAAcC,IAAAA;AAAd,GAAf,CAAb;;AAEA,MAAG;AACC,UAAMT,GAAG,GAAG,MAAMN,KAAK,CAACqB,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,CAAlB;AACAb,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAGb,gBADF;AAELc,MAAAA,OAAO,EAAGH,GAAG,CAACI;AAFT,KAAD,CAAR;AAIH,GAND,CAMC,OAAMY,GAAN,EAAU;AACP,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAad,IAAb,CAAkBa,MAAjC;;AACA,QAAGA,MAAH,EAAU;AACNA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIvB,QAAQ,CAACJ,QAAQ,CAAC2B,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACH;;AACDxB,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAGZ;AADF,KAAD,CAAR;AAGH;AAEJ,CAzBM","sourcesContent":["import { REGISTER_SUCCESS, REGISTER_FAIL, SIGN_IN, SIGN_ERROR} from './types';\r\nimport { setAlert } from './alert';\r\nimport axios from 'axios';\r\nimport setAuthToken from '../utils/setAuthToken';\r\n\r\n//sign in user =>memeriksa apakah user sudah login\r\nexport const loadUser = () => async dispatch =>{\r\n    if(localStorage.token){\r\n        setAuthToken(localStorage.token);\r\n    }\r\n\r\n    try{\r\n        const res = await axios.get('/api/auth');\r\n\r\n        dispatch({\r\n            type : SIGN_IN,\r\n            payload : res.data\r\n        });\r\n    }catch(er){\r\n        dispatch({\r\n            type : SIGN_ERROR\r\n            \r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport const register = ({ name, email, password })=> async dispatch =>  {\r\n    const config = {\r\n        headers : {\r\n            'Content-Type' : 'application/json'\r\n        }\r\n    }\r\n    \r\n    const body = JSON.stringify({name, email, password});\r\n     \r\n    try{\r\n        const res = await axios.post('/api/users', body, config);\r\n        dispatch({\r\n            type : REGISTER_SUCCESS,\r\n            payload : res.data\r\n        })\r\n    }catch(err){\r\n        const errors = err.response.data.errors\r\n        if(errors){\r\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\r\n        }\r\n        dispatch({\r\n            type : REGISTER_FAIL\r\n        })\r\n    }\r\n    \r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}